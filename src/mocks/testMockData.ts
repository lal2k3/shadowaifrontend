// src/mocks/testMockData.ts
import { Test } from '../types';

export const generatedTests: Test[] = [
  // Functional API Tests
  {
    type: 'functional',
    description: 'Verify login functionality using valid credentials.',
    endpoint: '/api/login',
    method: 'POST',
    headers: [{ key: 'Content-Type', value: 'application/json' }],
    params: [],
    body: '{"username": "testuser", "password": "testpassword"}',
    expectedResult: 'HTTP 200 OK, with a response body containing a session token.',
    apiVersion: 'v10.0',
  },
  {
    type: 'functional',
    description: 'Verify login functionality using invalid credentials.',
    endpoint: '/api/login',
    method: 'POST',
    headers: [{ key: 'Content-Type', value: 'application/json' }],
    params: [],
    body: '{"username": "invaliduser", "password": "wrongpassword"}',
    expectedResult: 'HTTP 401 Unauthorized, with an error message in the response body.',
    apiVersion: 'v10.0',
  },
  {
    type: 'functional',
    description: 'Fetch user details for a valid user ID.',
    endpoint: '/api/user/12345',
    method: 'GET',
    headers: [],
    params: [],
    body: '',
    expectedResult: 'HTTP 200 OK, with a response body containing user details.',
    apiVersion: 'v10.0',
  },
  {
    type: 'functional',
    description: 'Create a new user with valid details.',
    endpoint: '/api/user',
    method: 'POST',
    headers: [{ key: 'Content-Type', value: 'application/json' }],
    params: [],
    body: '{"username": "newuser", "email": "newuser@example.com", "password": "password123"}',
    expectedResult: 'HTTP 201 Created, with the new user details in the response body.',
    apiVersion: 'v10.0',
  },
  {
    type: 'functional',
    description: 'Update details for an existing user.',
    endpoint: '/api/user/12345',
    method: 'PUT',
    headers: [{ key: 'Content-Type', value: 'application/json' }],
    params: [],
    body: '{"email": "updateduser@example.com"}',
    expectedResult: 'HTTP 200 OK, with the updated user details in the response body.',
    apiVersion: 'v10.0',
  },
  {
    type: 'functional',
    description: 'Delete an existing user.',
    endpoint: '/api/user/12345',
    method: 'DELETE',
    headers: [],
    params: [],
    body: '',
    expectedResult: 'HTTP 204 No Content.',
    apiVersion: 'v10.0',
  },

  // Security API Tests
  {
    type: 'security',
    description: 'Test for SQL injection vulnerability.',
    endpoint: '/api/user',
    method: 'POST',
    headers: [{ key: 'Content-Type', value: 'application/json' }],
    params: [],
    body: '{"username": "test\' OR \'1\'=\'1", "password": "password"}',
    expectedResult: 'HTTP 400 Bad Request, with an appropriate error message.',
    apiVersion: 'v10.0',
  },
  {
    type: 'security',
    description: 'Test for XSS vulnerability.',
    endpoint: '/api/comment',
    method: 'POST',
    headers: [{ key: 'Content-Type', value: 'application/json' }],
    params: [],
    body: '{"comment": "<script>alert(\'XSS\')</script>"}',
    expectedResult: 'HTTP 400 Bad Request, with input sanitized in the response.',
    apiVersion: 'v10.0',
  },
  {
    type: 'security',
    description: 'Ensure endpoints are protected against unauthorized access.',
    endpoint: '/api/admin',
    method: 'GET',
    headers: [],
    params: [],
    body: '',
    expectedResult: 'HTTP 401 Unauthorized or HTTP 403 Forbidden.',
    apiVersion: 'v10.0',
  },
  {
    type: 'security',
    description: 'Verify API rate limiting functionality.',
    endpoint: '/api/rate_limit',
    method: 'GET',
    headers: [],
    params: [],
    body: '',
    expectedResult: 'HTTP 429 Too Many Requests, indicating rate limit exceeded.',
    apiVersion: 'v10.0',
  },
  {
    type: 'security',
    description: 'Test for Cross-Site Request Forgery vulnerability.',
    endpoint: '/api/transfer',
    method: 'POST',
    headers: [{ key: 'Content-Type', value: 'application/json' }],
    params: [],
    body: '{"amount": "100", "to_account": "12345678"}',
    expectedResult: 'HTTP 403 Forbidden, indicating invalid CSRF token.',
    apiVersion: 'v10.0',
  }
];
